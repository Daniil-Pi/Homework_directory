# print("CTRL + j + C - комментирование выделенного кода")
# print("CTRL + j + U - разкомментирование выделенного кода")

# a = 1
# b = 3
# c = "sd"
# print(f"{a} + {b} - {c}")
# print('{} + {} = {}'.format(a, b, a + b))

# #--------------------------------------------------------------------------------------------------------------------

# Set = {1,2,3} # - Это множества

# dictionary = {1: "Строка", 5: '!', 'b': 123, c: 'Еще строка', 'Tw':{1:"Подсловарь1", 2:"Подсловарь2"}}   # - Это словарь

# cort = (1,2,3)     # - Это кортеж (неизменяемый список)
# # print(dictionary['Tw'][1])

# #--------------------------------------------------------------------------------------------------------------------

# for i in dictionary.values():      # Выводит значения 
#     print(i)
# print()
# for i in dictionary.jeys():        #Выводит только ключи словаря
#     print(i)
# print()
# for i in dictionary.items():        #Выводит ключ и его значение
#     print(i)
# print()

# #--------------------------------------------------------------------------------------------------------------------
# - Эта функция поможет сразу выводить что-то, если того что мы ввели левым значением - нет

# print(dictionary.get(10, 'Давай по новой')) 
# print(dictionary.get(1)   #Или просто говорит, если элемент с соответствующим ключем или нет

# #--------------------------------------------------------------------------------------------------------------------
# Функция преобразует список в множество

# arr = [1, 1, 2, 0, -1, 3, 4, 4]
# print(set(arr)) 

# #--------------------------------------------------------------------------------------------------------------------
# Метод pop() удаляет элемент по указанному индексу и возвращает его

# names = ['Gvido', 'Roman' , 'Timur']    
# item = names.pop(1)
# print(item)
# print(names) 

# #--------------------------------------------------------------------------------------------------------------------
# split() - убирает все пробелы и создаем список из значений строки

# data = '1 2 3 5 8 15 23 38'.split()  
# print(data) 

#--------------------------------------------------------------------------------------------------------------------
#Удаляет лишние символы слева и справа

# j = "   765   "
# print(j.strip())  

#--------------------------------------------------------------------------------------------------------------------
# Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению

# food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']     
# print(food)
# food.remove('Рис')
# print(food)

#--------------------------------------------------------------------------------------------------------------------
# Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный

# names = ['Gvido', 'Roman' , 'Timur']     
# names.reverse()
# print(names)

#--------------------------------------------------------------------------------------------------------------------
# Примеры использования списочного выражения

# n = int(input('input size please: '))
# lines = [input() for num in range(n)]  
# print(lines)


# def get_factors(num):
#     res = [i for i in range(1,num + 1) if num % i == 0]       
#     return res
# n = int(input())
# print(get_factors(n))

#--------------------------------------------------------------------------------------------------------------------
# Метод sort() сортирует список по возрастанию

# list1 = [6,5,1,2]
# list1.sort()                   
# print(list1)

#--------------------------------------------------------------------------------------------------------------------
# Метод extend() как бы расширяет один список, добавляя к нему элементы другого списка.

# res = [1,5]              
# r = [1,3,2]
# res.extend(r)
# print(res)

#--------------------------------------------------------------------------------------------------------------------
#Функция randint() принимает два обязательных аргумента a и b и возвращает случайное целое число из отрезка [a;b].

# import random

# num1 = random.randint(0, 17)
# num2 = random.randint(-5, 5)

# print(num1)
# print(num2)

#--------------------------------------------------------------------------------------------------------------------
# функция randrange() возвращает случайно выбранное число из последовательности чисел.

# import random

# num = random.randrange(10)
# num2 = random.randrange(5, 10)
# num = random.randrange(0, 101, 10)

# # функция random() возвращает случайное число с плавающей точкой (вещественное число).
# # В функцию random() никаких аргументов не передается. 
# # Функция random() возвращает случайное число с плавающей точкой в диапазоне от 0.0 до 1.0 (исключая 1.0).

# import random

# num = random.random()
# print(num)

# # Функция uniform() тоже возвращает случайное число с плавающей точкой, 
# # но при этом она позволяет задавать диапазон для отбора значений.

# import random

# num = random.uniform(1.5, 17.3)
# print(num)

# # Могут иметься некоторые программы, где требуется всегда генерировать одну и ту же последовательность случайных чисел. 
# # При необходимости для этого можно вызвать функцию seed(), задав начальное значение.

# import random

# random.seed(17)   # явно устанавливаем начальное значение для генератора случайных чисел

# for _ in range(10):
#     print(random.randint(1, 100))  #Если выполнить такой код еще раз, то мы получим ту же самую последовательность псевдослучайных чисел.


# #--------------------------------------------------------------------------------------------------------------------
# # Функция shuffle() принимает список в качестве обязательного аргумента и перемешивает его случайным образом.

# import random

# numbers = [1, 2, 3, 4, 5, 6, 7, 8]
# random.shuffle(numbers)
# print(numbers)

# #--------------------------------------------------------------------------------------------------------------------
# # Функция choice() принимает список (строку) в качестве обязательного аргумента 
# # и возвращает один случайный элемент из переданного списка (строки).

# import random

# print(random.choice('BEEGEEj'))
# print(random.choice([1, 2, 3, 4]))
# print(random.choice(['a', 'b', 'c', 'd']))

# #--------------------------------------------------------------------------------------------------------------------
# # Функция sample() принимает два обязательных аргумента: список (строку) и 
# # количество случайных элементов, а возвращает список случайных элементов в указанном количестве.

# # import random
 
# # numbers = [2, 5, 8, 9, 12]

# # print(random.sample(numbers, 1))
# # print(random.sample(numbers, 2))
# # print(random.sample(numbers, 3))
# # print(random.sample(numbers, 5))

#--------------------------------------------------------------------------------------------------------------------
# Модуль math
# from math import *

#--------------------------------------------------------------------------------------------------------------------
# В Python встроены три функции bin(), oct(), hex(), 
# которые возвращают строковые представления целого десятичного числа в соответствующей системе счисления (2,8,16).

# print(bin(128))
# print(oct(128))
# print(hex(128))

# # Если нам требуется избавиться от приставок 0b, 0o, 0x, то мы можем воспользоваться строковым срезом:

# print(bin_num[2:])  # 1111111
# print(oct_num[2:])  # 177
# print(hex_num[2:])  # 7f

#--------------------------------------------------------------------------------------------------------------------
# В языке Python имеется встроенная функция isinstance() для проверки соответствия типа объекта какому-либо типу данных.

# print(isinstance(3, int))
# print(isinstance(3.5, float))
# print(isinstance('Beegeej', str))
# print(isinstance([1, 2, 3], list))
# print(isinstance(True, bool))
# print(isinstance(3.5, int))
# print(isinstance('Beegeej', float))

#--------------------------------------------------------------------------------------------------------------------
# Метод join в Python отвечает за объединение списка строк с помощью определенного указателя.

# vowels = ["a", "e", "i", "o", "u"]
# vowels_str = ",".join(vowels)
# print("Строка гласных:", vowels_str)

#--------------------------------------------------------------------------------------------------------------------
# Считывание вложенных списков

# n = 4                                         # количество строк (элементов)
# my_list = []

# for _ in range(n):
#     elem = [int(i) for i in input().split()]  # создаем список из элементов строки
#     my_list.append(elem)

#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------




def print_operation_table(operation, num_rows = 9, num_columns = 9):
    if num_rows < 2:
        print("ОШИБКА! Размерности таблицы должны быть больше 2!")
        return
    for i in range(1, num_rows+1):
        for j in range(1, num_columns+1):
            if j == num_columns:
                print(operation(i,j))
            else:
                print(operation(i,j), end = ' ')
print_operation_table(lambda x, y: x * y)
